using NUnit.Framework;
using tesselate_building;
using Wkx;

namespace NUnitTestProject1
{
    public class Tests
    {
        private string wktFootprint;
        private double height;
        private Polygon footprint;

        [SetUp]
        public void Setup()
        {
            wktFootprint = "POLYGON((-75.55478134 39.1632752950001,-75.55477116 39.163235817,-75.554760981 39.1631963390001,-75.554818218 39.163187394,-75.5548754549999 39.16317845,-75.5548856349999 39.1632179280001,-75.554896589 39.1632604100001,-75.554724403 39.163285407,-75.554724102 39.1632842400001,-75.55478134 39.1632752950001))";
            footprint = (Polygon)Geometry.Deserialize<WktSerializer>(wktFootprint);
            height = 11.55;
        }

        [Test]
        public void MakePolyHedralTest()
        {
            var polyhedral = TesselateBuilding.MakePolyHedral(footprint, height);
            var wkt = polyhedral.SerializeString<WktSerializer>();
            Assert.IsTrue(wkt == "POLYHEDRALSURFACE(((-75.55478134 39.1632752950001 0,39.1632752950001 -75.55477116 0,-75.55477116 39.163235817 0,-75.55478134 39.1632752950001 0)),((39.1632752950001 -75.55477116 0,-75.55477116 39.163235817 0,39.163235817 -75.554760981 0,39.1632752950001 -75.55477116 0)),((-75.55477116 39.163235817 0,39.163235817 -75.554760981 0,-75.554760981 39.1631963390001 0,-75.55477116 39.163235817 0)),((39.163235817 -75.554760981 0,-75.554760981 39.1631963390001 0,39.1631963390001 -75.554818218 0,39.163235817 -75.554760981 0)),((-75.554760981 39.1631963390001 0,39.1631963390001 -75.554818218 0,-75.554818218 39.163187394 0,-75.554760981 39.1631963390001 0)),((39.1631963390001 -75.554818218 0,-75.554818218 39.163187394 0,39.163187394 -75.5548754549999 0,39.1631963390001 -75.554818218 0)),((-75.554818218 39.163187394 0,39.163187394 -75.5548754549999 0,-75.5548754549999 39.16317845 0,-75.554818218 39.163187394 0)),((-75.55478134 39.1632752950001 11.55,39.1632752950001 -75.55477116 11.55,-75.55477116 39.163235817 11.55,-75.55478134 39.1632752950001 11.55)),((39.1632752950001 -75.55477116 11.55,-75.55477116 39.163235817 11.55,39.163235817 -75.554760981 11.55,39.1632752950001 -75.55477116 11.55)),((-75.55477116 39.163235817 11.55,39.163235817 -75.554760981 11.55,-75.554760981 39.1631963390001 11.55,-75.55477116 39.163235817 11.55)),((39.163235817 -75.554760981 11.55,-75.554760981 39.1631963390001 11.55,39.1631963390001 -75.554818218 11.55,39.163235817 -75.554760981 11.55)),((-75.554760981 39.1631963390001 11.55,39.1631963390001 -75.554818218 11.55,-75.554818218 39.163187394 11.55,-75.554760981 39.1631963390001 11.55)),((39.1631963390001 -75.554818218 11.55,-75.554818218 39.163187394 11.55,39.163187394 -75.5548754549999 11.55,39.1631963390001 -75.554818218 11.55)),((-75.554818218 39.163187394 11.55,39.163187394 -75.5548754549999 11.55,-75.5548754549999 39.16317845 11.55,-75.554818218 39.163187394 11.55)),((-75.55478134 39.1632752950001 0,-75.55477116 39.163235817 0,-75.55478134 39.1632752950001 11.55,-75.55478134 39.1632752950001 0)),((-75.55478134 39.1632752950001 11.55,-75.55477116 39.163235817 11.55,-75.55477116 39.163235817 0,-75.55478134 39.1632752950001 11.55)),((-75.55477116 39.163235817 0,-75.554760981 39.1631963390001 0,-75.55477116 39.163235817 11.55,-75.55477116 39.163235817 0)),((-75.55477116 39.163235817 11.55,-75.554760981 39.1631963390001 11.55,-75.554760981 39.1631963390001 0,-75.55477116 39.163235817 11.55)),((-75.554760981 39.1631963390001 0,-75.554818218 39.163187394 0,-75.554760981 39.1631963390001 11.55,-75.554760981 39.1631963390001 0)),((-75.554760981 39.1631963390001 11.55,-75.554818218 39.163187394 11.55,-75.554818218 39.163187394 0,-75.554760981 39.1631963390001 11.55)),((-75.554818218 39.163187394 0,-75.5548754549999 39.16317845 0,-75.554818218 39.163187394 11.55,-75.554818218 39.163187394 0)),((-75.554818218 39.163187394 11.55,-75.5548754549999 39.16317845 11.55,-75.5548754549999 39.16317845 0,-75.554818218 39.163187394 11.55)),((-75.5548754549999 39.16317845 0,-75.5548856349999 39.1632179280001 0,-75.5548754549999 39.16317845 11.55,-75.5548754549999 39.16317845 0)),((-75.5548754549999 39.16317845 11.55,-75.5548856349999 39.1632179280001 11.55,-75.5548856349999 39.1632179280001 0,-75.5548754549999 39.16317845 11.55)),((-75.5548856349999 39.1632179280001 0,-75.554896589 39.1632604100001 0,-75.5548856349999 39.1632179280001 11.55,-75.5548856349999 39.1632179280001 0)),((-75.5548856349999 39.1632179280001 11.55,-75.554896589 39.1632604100001 11.55,-75.554896589 39.1632604100001 0,-75.5548856349999 39.1632179280001 11.55)),((-75.554896589 39.1632604100001 0,-75.554724403 39.163285407 0,-75.554896589 39.1632604100001 11.55,-75.554896589 39.1632604100001 0)),((-75.554896589 39.1632604100001 11.55,-75.554724403 39.163285407 11.55,-75.554724403 39.163285407 0,-75.554896589 39.1632604100001 11.55)),((-75.554724403 39.163285407 0,-75.554724102 39.1632842400001 0,-75.554724403 39.163285407 11.55,-75.554724403 39.163285407 0)),((-75.554724403 39.163285407 11.55,-75.554724102 39.1632842400001 11.55,-75.554724102 39.1632842400001 0,-75.554724403 39.163285407 11.55)),((-75.554724102 39.1632842400001 0,-75.55478134 39.1632752950001 0,-75.554724102 39.1632842400001 11.55,-75.554724102 39.1632842400001 0)),((-75.554724102 39.1632842400001 11.55,-75.55478134 39.1632752950001 11.55,-75.55478134 39.1632752950001 0,-75.554724102 39.1632842400001 11.55)))");
        }


        [Test]
        public void TriangulateBuildingTest()
        {
            var triangles = TesselateBuilding.MakeBuilding(footprint, height);
            Assert.IsTrue(triangles.Count == 7 * 2 + (footprint.ExteriorRing.Points.Count - 1) * 2);
        }

        [Test]
        public void TriangulatePolygonTest()
        {
            var polygons = TesselateBuilding.Tesselate(footprint, height);
            Assert.IsTrue(polygons.Count==7);
        }

        [Test]
        public void MakeWallsTest()
        {
            var walls = TesselateBuilding.MakeWalls(footprint, height);
            Assert.IsTrue(walls.Count == (footprint.ExteriorRing.Points.Count-1)*2);
        }
    }
}